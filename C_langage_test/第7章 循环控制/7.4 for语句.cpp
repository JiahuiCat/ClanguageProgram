/* 7.4   for语句
可以控制一个循环，在每一次循环时修改循环变量。
可以用于循环次数已经确定的情况，而且可以用于循环次数不确定而只给出循环结束条件的情况。

for语句的一般形式
for(表达式 1;表达式 2;表达式 3;)

每条for语句包含3个用分号隔开的表达式。这3个表达式用一对圆括号起来，其后紧跟着循环语句或语句块。
当执行到for语句时，程序首先计算第一个表达式的值，接着计算第二个表达式的值。
如果第二个表达式的值为真，程序就执行循环体的内容，并计算第3个表达式；
然后检验第二个表达式，执行循环；如此反复，直到第二个表达式的值为假，退出循环。

for语句的执行流程图。对for语句的介绍，总结其执行过程如下:

(1)求解表达式1
(2)求解表达式2，若其值为真，则执行for语句中的循环语句块，然后执行步骤(3);若为假，则结束循环，转到步骤(5).
(3)求解表达式3.
(4)回到上面的步骤(2),继续执行。
(5)循环结束，执行for语句下面的一个语句。

for语句简单的应用形式:
for(循环变量赋初值;循环条件;循环变量) 语句块

实现一个循环操作:
for(i=1;i<100;i++){
    printf("The i is:%d",i);
}

eg 7.4使用for语句显示随机数。
要求使用for循环语句显示10个随机数字。其中，产生随机数要用到srand和rand函数，这个两个函数都包含在stdio.h头文件中。
 */
#include<stdio.h>
#include<stdlib.h>

int main(){
    int counter;//定义变量
    /* 使用for语句，为变量赋值，执行循环 */
    for (counter = 0; counter < 10;counter++)
    {
        srand(counter+1);
        printf("Random number %d is :%d\n",counter,rand());
    }
    return 0;
}
/* 
程序分析:
(1)定义变量counter。在for语句中先对counter进行赋值，然后判断counter<10的条件是否为真，
再根据判断的结果选择是否执行循环语句。
(2)srand和rand函数都包含在stdlib.h头文件中,srand函数的功能是设定一个随机发生数的种子，
rand函数是根据设定的随机发生数种子产生特定的随机数
(3)使用srand函数设定counter+1为设定的种子，然后使用rand函数产生特定的随机发生数，然后将产生的随机数进行输出

程序说明:
在使用rand函数之前不提供种子值，也就是不用srand函数设定种子值，则rand函数总是默认以1作为种子，每次将产生同样的随机数序列。
因此每次循环使用counter+1作为种子值。
 */