/* 7.5变量的作用域-局部变量和全局变量
局部变量
在函数或复合语句中定义的变量，只在本函数或复合语句内范围内有效(从定义点开始到函数或复合语句结束)，它们称为内部变量或局部变量
只在函数或复合语句内才能使用它们，在此函数或复合语句以外是不能使用这些变量
    说明:(1)主函数中定义的变量也只在主函数中有效，而不因为是在主函数中定义的而在整个文件或程序中有效。
    主函数也不能使用其他函数中定义的变量。
    (2)不同函数中可以使用相同名字的变量，它们代表不同的对象，互不干扰。
    (3)形式参数也是局部变量.
全局变量
一个程序可以包含一个或若干个源程序文件(即程序模块)，而一个源程序文件可以包含一个或若干个函数。
在函数之外定义的变量是外部变量，也称为全局变量。
全局变量的有效范围从定义变量的位置开始到本源程序文件结束，在此范围内可以为本程序文件中所有函数所共用。
    在一个函数中既可以使用本函数中的局部变量，又可以使用有效的全局变量。

    关于全局变量和局部变量的作用域:
    如果在同一个源文件中，全局变量与局部变量同名，则在局部变量的作用范围内，全局变量被“屏蔽”，即它不起作用，此时只有局部变量是有效的。
 */

/* 
    例7.11有4个学生，5门课的成绩，要求输出其中的最高成绩以及它属于第几个学生，第几门课程。
    resolve,使用全局变量，通过全局变量从函数中得到所需要的值。
 */
#include<stdio.h>
int Row,Column;//定义全局变量Row和Column
float highest_score(float array[4][5])
{
    int i, j;
    float max;
    max = array[0][0];
    for (i = 0; i < 4; i++)
        for (j = 0; j < 5; j++)
            if (array[i][j] > max)
            {
                max = array[i][j];
                Row = i;    //将行的序号赋给全局变量Row
                Column = j; //将列的序号赋给全局变量Column
            }
    return(max);
}
int main(){
    float highest_score(float array[4][5]);
    float score[4][5]={{76,77,89,45,88},{72,67,85.5,65,90},
                        {78,77,69,86,88},{98,79,76,34,65}};
    printf("The highest score is %6.2f\n",highest_score(score));
    printf("Student No.is %d\nCourse No.is %d\n",Row+1,Column+1);
    return 0;
}
/*
he highest score is  98.00
Student No.is 4
Course No.is 1
第4个学生第1门课的成绩为98 */

/* analyze(分析)
z增加连个全局变量Row和Colunmn,用来供保存最高分的行和列的信息，由于全局变量字整个文件范围内都有效，
因此在highest_score函数中将行序号i和列序号j赋给全局变量Row和Colunmn，
在函数调用结束后，函数中的局部变量被释放，但全局变量保存下来，可以在main函数中输出它们的值。


 */
/* 
attention(注意)
1.全局变量在程序的全部执行的全部执行过程中都占用存储单元。
2.全局变量使函数的通用性降低。c程序中的函数做成一个封闭体，可以通过“实参-形参”的渠道与外界发生联系，没有其他渠道。这样做程序移植性，可读性强
3.使用全局变量过多，会降低程序清晰性。
 */

