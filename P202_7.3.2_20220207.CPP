#include<stdio.h>
/* 在调用一个函数的过程中又出现直接或间接地调用该函数本身，称为函数的递归调用
C语言的特点之一就是在于允许函数的递归调用。 */

/* int f(int x){
    int y,z;
    z=f(y);//在执行f函数的过程中又要调用f函数
    return(2*z);
}
 */

/* 在调用f函数的过程中，又要调用f函数，这是直接调用本函数，如果在调用f1函数过程中，
要调用f2函数，而在调用f2函数过程中又要调用f1函数就是间接调用本函数 

attention:在调用一个函数过程中调用另一个函数，称为函数的嵌套调用
在调用一个函数过程中直接或间接调用本函数，称为函数的递归调用*/

/* ======================================================= */

/* example 例7.4 有5个学生坐在一起，问第5个学生多少岁？他说比第4个学生大2岁。问第4个学生岁数，
他说比第3个学生大2岁。问第3个学生，又说第2个学生大2岁。问第2个学生，说比第1个学生大2岁。
最后问第1个学生，他说10岁。请问第5个学生多大。*/

/* resolve 解题思路
想知道求第5个学生的年龄，就必须先知道第4个学生的年龄，而第4个学生的年龄也不知道，
要想求第4个学生的年龄必须先知道第3个学生的年龄，而第3个学生的年龄又取决于第2个学生的年龄
第2个学生的年龄取决于第1个学生的年龄，而且每一个学生的年龄都比其前1个学生的年龄大2岁。
显然这是一个递归问题。如果age是年龄函数,age(n)代表第n个学生的年龄，可以用下面的式子表示上述关系。
 */

/* 
age(5)=age(4)+2
age(4)=age(3)+2
age(3)=age(2)+2
age(2)=age(1)+2
age(1)=10

n=1  x=10
n>1  age(n)=age(n-1)+2   

当n>1时，求第n个学生的年龄的公式是相同的，即前一个学生的年龄加2。因此可以用一个公式表示上述关系。
*/

/* 求解过程可分成两个阶段：第一阶段是“回溯”，即将第n个学生的年龄表示出来
为第(n-1)个学生的函数:函数 age(n)=age(n-1)+2。而第(n-1)个学生的年龄仍然不知道，还要“回推”到第(n-2)个学生的年龄...直到第1个学生的年龄。
此时age(1)已知，不必在向前推了。然后开始第二阶段，采用递进方法，从第1个学生的已知年龄推算出第2个学生的年龄12岁，从第2个学生年龄推算出第3个学生的年龄（14岁）
......一直推算出第5个学生的年龄18岁为止。一个递归的问题可以分为“回溯”和“递推”两个阶段 */

/* 如果要求递归过程不是无限制进行下去，必须具有一个结束递归过程的条件。
在这example中条件为age(1)=10，就是使递归结束的条件。 */

int age(int n){//求年龄的递归函数
    int c;//变量c用作存放函数的返回值的变量
    if(n==1) c=10;//如果n=1时 变量的值为10；
    else c=age(n-1)+2;//在执行age函数过程中又调用age函数，即递归调用
    return(c);
}

/* 用主函数调用age函数，求得第5个学生的年龄: */
int main(){
    printf("%d\n",age(5));//输出第5个学生的年龄
    return 0;
}

/* main函数中实际上自由一个语句。整个问题的求解靠调用age(5)函数调用来解决。 */